.Dd $Mdocdate$
.Dt STRONGBOX 3
.Os
.Sh NAME
.Nm strongbox
.Nd authenticate and secure small messages.
.Sh SYNOPSIS
.In cryptobox/strongbox.h
.Ft int
.Fo strongbox_generate_key
.Fa "unsigned char *key"
.Fc
.Ft "unsigned char *"
.Fo strongbox_seal
.Fa "unsigned char *message"
.Fa "int message_len"
.Fa "int *box_len"
.Fa "unsigned char *key"
.Fc
.Ft "unsigned char *"
.Fo strongbox_open
.Fa "unsigned char *box"
.Fa "int box_len"
.Fa "unsigned char *key"
.Fc
.Sh DESCRIPTION
strongbox is used to authenticate and secure small messages. It
provides an interface similar to NaCL for securing and authenticating
messages in boxes. The boxes are self-contained; the only information
needed to recover a message from a box is the box, its length, and the
key used to secure the message.  Messages should be secured using the
.Nm strongbox_seal
function, and
recovered using the
.Nm strongbox_open
function. A box (or authenticated
and encrypted message) will be STRONGBOX_OVERHEAD bytes longer than the
message it came from; this library will not obscure the length of the
message. Keys, if they are not generated using the
.Nm strongbox_generate_key
function, should be STRONGBOX_KEY_SIZE bytes long. Note that this varies
from the spec in that it is impossible to provide a suitable key function;
it is up to the caller to ensure that the key is appropriately sized. The
caller is responsible for freeing boxes.  The boxes used in this package
are suitable for 20-year security, assuming the keys are not compromised.
.Sh RETURN VALUES
The 
.Nm strongbox_generate_key
function returns 1 on success, and 0 on failure.
The
.Nm strongbox_seal
function returns the secured message (the "box"), whose length is stored
in the box_len integer if it is not NULL. The caller is responsible
for freeing the box. If the message couldn't be secured, the function
returns NULL. The most likely cause will be an invalid key.
The
.Nm strongbox_open
function returns the decrypted message (which is box_len -
STRONGBOX_OVERHEAD bytes), or NULL if the message could not be recovered
from the box.
.Sh EXAMPLES
The following function carries out a complete cycle of securing a message,
and recovering the message from the box, and returns -1 if the cycle
failed and 0 on success:
.Bl
int
box_cycle(unsigned char *message, int message_len, unsigned char *key)
{
        unsigned char   *box = NULL;
        unsigned char   *msg = NULL;
        int              box_len = 0;
        int              res = -1;

        box = strongbox_seal(message, message_len, &box_len, key);
        if (NULL == box)
                return -1;
        msg = strongbox_open(box, box_len, key);
        if (NULL != msg) {
                if (0 == memcmp(msg, message, box_len-STRONGBOX_OVERHEAD))
                        res = 0;
                free(msg);
        }
        free(box);
        return res;
}
.El
A function that fills in a key from a file and seals the message:
.Bl
unsigned char *
read_key_and_box(const char *filename, unsigned char *message, int message_len)
{
        unsigned char    key[STRONGBOX_KEY_SIZE];
        unsigned char   *box = NULL;
        FILE            *keyfile = NULL;

        if (NULL == (keyfile = fopen(filename, "r")))
                return NULL;
        if (STRONGBOX_KEY_SIZE == fread(key, 1, STRONGBOX_KEY_SIZE, keyfile)) {
                box = strongbox_seal(message, message_len, NULL, key);
        }
        fclose(keyfile);
        return box;
}
.El
.Sh ERRORS
The most common errors will be caused by an invalid key. It is critical
to ensure that the key is the proper size.
.Sh CIPHERS
.Nm
uses AES-256 in CTR mode with an HMAC-SHA-256 message tag. The nonce is
stored in the first 16 bytes of the box, and the message tag is stored
in the last 32 bytes of the box.
.Sh SEE ALSO
.Xr secretbox 3
.Lk http://cryptobox.tyrfingr.is/ "The CryptoBox Project"
.Sh STANDARDS
.Nm
conforms to the C99 and SUSv3.
.Sh AUTHORS
.Nm
was written by
.An Kyle Isom Mq At kyle@tyrfingr.is .
.Sh BUGS
Please report all bugs to the author.
